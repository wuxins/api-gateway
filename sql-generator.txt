package com.zhongan.life.policy.service;

import com.google.common.collect.Lists;
import com.google.common.collect.Sets;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.Set;

public class Tes {

    public static void main(String[] args) throws IOException {

        String env = "dev";
        String filePath = "C:\\work\\apis\\api.txt";

        List<String> truncateSQL = Lists.newArrayList();
        truncateSQL.add("TRUNCATE `api_gateway`.`api`;");
        truncateSQL.add("TRUNCATE `api_gateway`.`api_version`;");
        truncateSQL.add("TRUNCATE `api_gateway`.`upstream_service`;");
        truncateSQL.add("TRUNCATE `api_gateway`.`tenant`;");
        truncateSQL.add("TRUNCATE `api_gateway`.`api_tenant`;");

        Set<String> groupCodes = Sets.newHashSet();
        List<String> tenantCodes = Lists.newArrayList();
        tenantCodes.add("bling");
        tenantCodes.add("website");

        List<String> apis = Lists.newArrayList();
        List<String> apiVersions = Lists.newArrayList();
        List<String> tenants = Lists.newArrayList();
        tenants.add("INSERT INTO `api_gateway`.`tenant`(`name`, `tenant_code`) VALUES ('银保', 'bling');");
        tenants.add("INSERT INTO `api_gateway`.`tenant`(`name`, `tenant_code`) VALUES ('官网', 'website');");
        List<String> apiTenants = Lists.newArrayList();
        List<String> upstreamServices = Lists.newArrayList();

        List<String> strings = Files.readAllLines(Paths.get(filePath));
        for (String line : strings) {
            String[] split = line.split("\t");
            String groupName = split[0];
            String groupCode = split[1];
            String destUrl = split[2];
            String srcUrl = split[3];
            String upstreamHost = split[4];
            String apiCode = split[5];
            String method = split[6];
            String needRateLimit = split[7];
            String rateLimit = split[8];
            String needFallback = split[9];
            String fallback = split[10];
            String needMonitor = split[11];
            String readTimeout = split[12];
            String maintainer = split[13];
            String name = "TODO";
            String desc = name;
            if (split.length == 15) {
                name = split[14];
                desc = name;
            }
            if (split.length == 16) {
                name = split[14];
                desc = split[15];
            }

            if (!groupCodes.contains(groupCode)) {
                groupCodes.add(groupCode);
                String groupSql = "INSERT INTO `api_gateway`.`upstream_service`(`name`, `service_code`, `host`) VALUES " +
                        "('%s', '%s', '%s');";
                upstreamServices.add(String.format(groupSql, groupName, groupCode,upstreamHost));
            }

            String apiSql = "INSERT INTO `api_gateway`.`api`(`name`, `api_code`, `service_code`, `method`, `src_url`, `des_url`, `description`,`maintainer`) VALUES " +
                    "('%s', '%s', '%s', '%s', '%s', '%s', '%s','%s');";
            apis.add(String.format(apiSql, name, apiCode, groupCode, method, srcUrl, destUrl, desc, maintainer));

            for (String tenantCode : tenantCodes) {
                String tenantSQL = "INSERT INTO `api_gateway`.`api_tenant`(`api_code`, `tenant_code`) VALUES ('%s', '%s');";
                apiTenants.add(String.format(tenantSQL, apiCode, tenantCode));
            }

            String apiVersionSQL = "INSERT INTO `api_gateway`.`api_version`(`api_code`, `env`, `need_rate_limit`, `rate_limit`, `need_fallback`, `fallback`, `need_monitor`, `read_timeout`) VALUES " +
                    "('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s');";
            apiVersions.add(String.format(apiVersionSQL, apiCode, env, needRateLimit, rateLimit, needFallback, fallback, needMonitor, readTimeout));
        }
        System.out.println();
        truncateSQL.forEach(System.out::println);

        System.out.println();
        apis.forEach(System.out::println);

        System.out.println();
        apiVersions.forEach(System.out::println);

        System.out.println();
        tenants.forEach(System.out::println);

        System.out.println();
        apiTenants.forEach(System.out::println);

        System.out.println();
        upstreamServices.forEach(System.out::println);
    }
}
